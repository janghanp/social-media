datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation("UserAndAccounts", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  username      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  likedPostsIds String[]  @db.ObjectId

  accounts Account[] @relation("UserAndAccounts")

  posts Post[] @relation("UserAndPosts")

  comments Comment[] @relation("UserAndComments")

  likedPosts Post[] @relation("UsersLikePosts", fields: [likedPostsIds], references: [id])
}

type File {
  ratio Float
  Key   String
}

model Post {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  body       String
  files      File[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String   @db.ObjectId
  likedByIds String[] @db.ObjectId

  user User @relation("UserAndPosts", fields: [userId], references: [id])

  comments Comment[] @relation("PostAndComments")

  likedBy User[] @relation("UsersLikePosts", fields: [likedByIds], references: [id])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @db.ObjectId
  postId    String   @db.ObjectId
  parentId  String?  @db.ObjectId

  user User @relation("UserAndComments", fields: [userId], references: [id])

  post Post @relation("PostAndComments", fields: [postId], references: [id], onDelete: Cascade)

  parent   Comment?  @relation("CommentandComments", fields: [parentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  children Comment[] @relation("CommentandComments")
}
