datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation("UserAndAccounts", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  username         String?   @unique
  email            String?   @unique
  emailVerified    DateTime?
  image            String?
  likedPostsIds    String[]  @db.ObjectId
  likedCommentsIds String[]  @db.ObjectId
  followingIds     String[]  @db.ObjectId
  followedByIds    String[]  @db.ObjectId

  accounts      Account[]      @relation("UserAndAccounts")
  posts         Post[]         @relation("UserAndPosts")
  comments      Comment[]      @relation("UserAndComments")
  likedPosts    Post[]         @relation("UsersLikePosts", fields: [likedPostsIds], references: [id])
  likedComments Comment[]      @relation("UsersLikeComments", fields: [likedCommentsIds], references: [id])
  following     User[]         @relation("UserFollows", fields: [followingIds], references: [id])
  followedBy    User[]         @relation("UserFollows", fields: [followedByIds], references: [id])
  notifications Notification[] @relation("UserReceiveNotifications")
  sender        Notification[] @relation("UserSendNotifications")
}

type File {
  ratio Float
  Key   String
}

model Post {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  body                String
  files               File[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  userId              String   @db.ObjectId
  likedByIds          String[] @db.ObjectId
  parentCommentsCount Int      @default(0)

  user     User      @relation("UserAndPosts", fields: [userId], references: [id])
  comments Comment[] @relation("PostAndComments")
  likedBy  User[]    @relation("UsersLikePosts", fields: [likedByIds], references: [id])
}

model Comment {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  comment     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String   @db.ObjectId
  postId      String   @db.ObjectId
  parentId    String?  @db.ObjectId
  likedByIds  String[] @db.ObjectId
  mentionUser String?

  user     User      @relation("UserAndComments", fields: [userId], references: [id])
  post     Post      @relation("PostAndComments", fields: [postId], references: [id], onDelete: Cascade)
  parent   Comment?  @relation("CommentandComments", fields: [parentId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  children Comment[] @relation("CommentandComments")
  likedBy  User[]    @relation("UsersLikeComments", fields: [likedByIds], references: [id])
}

enum Type {
  FOLLOW
  LIKEPOST
  LIKECOMMENT
  COMMENT
}

model Notification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  targetId   String?   @db.ObjectId
  type       Type
  is_read    Boolean  @default(false)
  createdAt  DateTime @default(now())

  //one to many relation
  receiver User @relation("UserReceiveNotifications", fields: [receiverId], references: [id])
  //one to many relation
  sender   User @relation("UserSendNotifications", fields: [senderId], references: [id])
}
